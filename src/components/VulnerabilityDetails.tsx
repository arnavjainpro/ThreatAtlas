import React, { useState, useEffect } from 'react';
import { SecurityScanService } from '../services/securityScanService';
import './VulnerabilityDetails.css';

interface VulnerabilityDetailsProps {
  scanId: string;
  onClose: () => void;
}

const VulnerabilityDetails: React.FC<VulnerabilityDetailsProps> = ({ scanId, onClose }) => {
  const [scan, setScan] = useState<any | null>(null);
  const [vulnerabilities, setVulnerabilities] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [severityFilter, setSeverityFilter] = useState<string>('all');

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        const data = await SecurityScanService.getVulnerabilityData();
        
        // Find the specific scan and its vulnerabilities
        const targetScan = data.find(item => item.scan_id === scanId);
        if (targetScan) {
          setScan(targetScan);
          setVulnerabilities(data.filter(item => item.scan_id === scanId));
        } else {
          setError('Scan not found');
        }
      } catch (err) {
        console.error('Error loading scan details:', err);
        setError('Failed to load scan details');
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [scanId]);

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'high': return '#dc2626';
      case 'medium': return '#d97706';
      case 'low': return '#16a34a';
      case 'informational': return '#3b82f6';
      default: return '#6b7280';
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => 
    severityFilter === 'all' || vuln.severity.toLowerCase() === severityFilter
  );

  const severityCounts = {
    high: vulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length,
    medium: vulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length,
    low: vulnerabilities.filter(v => v.severity.toLowerCase() === 'low').length,
    informational: vulnerabilities.filter(v => v.severity.toLowerCase() === 'informational').length
  };

  if (loading) {
    return (
      <div className="vulnerability-details-overlay">
        <div className="vulnerability-details-modal">
          <div className="modal-header">
            <h2>Loading Scan Details...</h2>
            <button onClick={onClose} className="close-button">×</button>
          </div>
          <div className="loading-content">
            <div className="loading-spinner"></div>
          </div>
        </div>
      </div>
    );
  }

  if (error || !scan) {
    return (
      <div className="vulnerability-details-overlay">
        <div className="vulnerability-details-modal">
          <div className="modal-header">
            <h2>Error</h2>
            <button onClick={onClose} className="close-button">×</button>
          </div>
          <div className="error-content">
            <p>{error || 'Scan not found'}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="vulnerability-details-overlay">
      <div className="vulnerability-details-modal">
        <div className="modal-header">
          <div className="scan-info">
            <h2>{scan.target || 'Security Scan'}</h2>
            <div className="scan-meta">
              <span className="tool-name">ZAP</span>
              <span className="scan-date">{new Date(scan.started_at || scan.created_at).toLocaleString()}</span>
              <span className={`status-badge status-${scan.status}`}>
                {scan.status}
              </span>
            </div>
          </div>
          <button onClick={onClose} className="close-button">×</button>
        </div>

        <div className="modal-content">
          {/* Scan Overview */}
          <div className="scan-overview">
            <div className="overview-item">
              <span className="label">Target:</span>
              <span className="value">{scan.target || 'Unknown'}</span>
            </div>
            <div className="overview-item">
              <span className="label">Scan ID:</span>
              <span className="value">{scan.id}</span>
            </div>
            <div className="overview-item">
              <span className="label">Total Vulnerabilities:</span>
              <span className="value">{vulnerabilities.length}</span>
            </div>
          </div>

          {/* Severity Summary */}
          <div className="severity-summary">
            <div className="severity-card severity-card--high">
              <div className="severity-count">{severityCounts.high}</div>
              <div className="severity-label">High</div>
            </div>
            <div className="severity-card severity-card--medium">
              <div className="severity-count">{severityCounts.medium}</div>
              <div className="severity-label">Medium</div>
            </div>
            <div className="severity-card severity-card--low">
              <div className="severity-count">{severityCounts.low}</div>
              <div className="severity-label">Low</div>
            </div>
            <div className="severity-card severity-card--info">
              <div className="severity-count">{severityCounts.informational}</div>
              <div className="severity-label">Info</div>
            </div>
          </div>

          {/* Filters */}
          <div className="vulnerability-filters">
            <label>Filter by Severity:</label>
            <select 
              value={severityFilter} 
              onChange={(e) => setSeverityFilter(e.target.value)}
              className="severity-filter"
            >
              <option value="all">All Severities ({vulnerabilities.length})</option>
              <option value="high">High ({severityCounts.high})</option>
              <option value="medium">Medium ({severityCounts.medium})</option>
              <option value="low">Low ({severityCounts.low})</option>
              <option value="informational">Informational ({severityCounts.informational})</option>
            </select>
          </div>

          {/* Vulnerabilities List */}
          <div className="vulnerabilities-list">
            {filteredVulnerabilities.length > 0 ? (
              filteredVulnerabilities.map((vuln) => (
                <div key={vuln.id} className="vulnerability-item">
                  <div className="vuln-header">
                    <div className="vuln-title">{vuln.name}</div>
                    <span 
                      className="severity-badge"
                      style={{ backgroundColor: getSeverityColor(vuln.severity) }}
                    >
                      {vuln.severity}
                    </span>
                  </div>
                  
                  <div className="vuln-details">
                    <p className="vuln-description">{vuln.description}</p>
                    
                    {vuln.solution && (
                      <div className="vuln-solution">
                        <strong>Solution:</strong> {vuln.solution}
                      </div>
                    )}
                    
                    <div className="vuln-metadata">
                      {vuln.confidence && (
                        <span className="metadata-item">
                          <strong>Confidence:</strong> {vuln.confidence}
                        </span>
                      )}
                      {vuln.cwe_id && (
                        <span className="metadata-item">
                          <strong>CWE:</strong> {vuln.cwe_id}
                        </span>
                      )}
                      {vuln.wasc_id && (
                        <span className="metadata-item">
                          <strong>WASC:</strong> {vuln.wasc_id}
                        </span>
                      )}
                    </div>
                    
                    {vuln.reference && (
                      <div className="vuln-reference">
                        <strong>Reference:</strong> 
                        <a href={vuln.reference} target="_blank" rel="noopener noreferrer">
                          {vuln.reference}
                        </a>
                      </div>
                    )}
                  </div>
                </div>
              ))
            ) : (
              <div className="no-vulnerabilities">
                <p>No vulnerabilities found for the selected severity level.</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityDetails;
